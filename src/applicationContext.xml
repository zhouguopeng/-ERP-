<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/mvc 
	   http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	   
	   
 
 	<context:annotation-config />
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.controller" />
    <mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>	
	</mvc:annotation-driven>
	
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
	<mvc:default-servlet-handler/>
 
   
 
    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
     
     
    <!-- 配置视图解析器，将ModelAndView及字符串解析为具体的页面 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver"
        p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/WEB-INF/view/"
        p:suffix=".jsp" />
        
        <!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/main/index"/>
	
	<!-- 全局异常配置 start -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
		<property name="exceptionMappings">  
            <props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>      
                <prop key="java.lang.Throwable">error/500</prop>
            </props>  
        </property>  
        <property name="statusCodes">  
            <props>  
                <prop key="500">500</prop>  
                <prop key="404">404</prop>
                <prop key="403">403</prop>  
            </props>  
        </property>  
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->  
        <property name="warnLogCategory" value="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"/>  
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->  
        <property name="defaultErrorView" value="error/500"/>  
        <!-- 默认HTTP状态码 ，返回错误默认设置的状态码-->  
        <property name="defaultStatusCode" value="200"/>  
    </bean>  
    <!-- 全局异常配置 end -->
    
        <!-- 支持 Shiro对Controller的方法级AOP安全控制 begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	<!-- 支持 Shiro对Controller的方法级AOP安全控制 end  -->
	
	<bean id="viewResolver1" class="org.springframework.web.servlet.view.XmlViewResolver">
  		<property name="order" value="1"/>
  		<property name="location" value="classpath:views.xml"/>
	</bean>
    
   <!--  <bean id="dynamicBeanReader" class="com.service.implement.DynamicBeanReaderImpl" init-method="init">  </bean> -->  
  <!--   <bean id="dynamicdatasource" class="com.common.DynamicDataSource">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                 <entry key="defaultDataSource" value-ref="defaultDataSource" />   
            </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="defaultDataSource" />  
    </bean>   -->
        
</beans>